<!-- Now we have access to action and campervan local variables  -->

<% if action == :edit %>
  <% action_url = campervan_url(campervan) %> <!-- #update -->
<% elsif action == :new %>
  <% action_url = campervans_url %> <!-- campervan#create -->
<% end %>

<!--
if action was not passed as a local variable, you can do the following if campervan.#persisted?(had been previously saved to DB) return PATCH:

<% action_url = campervan.persisted? ? campervan_url(campervan) : campervans_url %>
<% method = campervan.persisted? ? :patch : :post %>

* PUT HTTP Verb is used if we want to replace an existing object entirely. We will mostly use PATCH HTTP verb to change a few attributes of an existing object. Both HTTP verbs direct to the controller#update action.
-->

<!-- when form submits, all info gets packaged and a POST request is made to campervans_url (which is campervans#create). -->
<!-- action: url to which we want to send data -->
<!-- method: http method we want to use -->
<form action="<%= action_url %>" method="post">

  <!-- for historical reasons <form> won't let you specify a method of PATCH, only GET or POST requests. The Rails solution is to upload a special parameter named _method with the value set to the HTTP method you want in an <input /> tag using a hidden field -->
  <% if action == :edit %>
    <input type="hidden" name="_method" value="patch">
  <% end %>

  <!-- <input type="hidden" name="_method" value="<%= method %>"> -->

  <!-- for attribute tells which <input> to tie <label> to -->
  <label for="name">Name</label>

    <!-- campervan.name will either return actual name if it exists, or 'nil' due to Campervan.new in campervanr#new. So we don't need ternary -->
    <input id="name" type="text" name="campervan[name]" value="<%= campervan.name %>" />
    <br />

  <label for="year">Year</label>
    <input id="year" type="text" name="campervan[year]" value="<%= campervan.year %>" />
    <br />

  <label for="make">Make</label>
    <select id="make" name="campervan[make]">
      <!-- if campervan.make returns 'nil' due to Campervan.new in campervan#new, return "selected" -->
      <option disabled <%= campervan.make ? "" : "selected" %> >--select a make--</option>

      <% Campervan::CAMPERVAN_MAKES.each do |make| %>
        <option
          value="<%= make %>" <%= campervan.make == make ? "selected" : "" %>>
          <%= make.upcase %>
        </option>
      <% end %>
    </select>
    <br />

  <label for="model">Model</label>
    <input id="model" type="text" name="campervan[model]" value="<%= campervan.model %>" />
    <br />

  <label for="color">Color</label>
    <select id="color" name="campervan[color]">
      <option disabled <%= campervan.make ? "" : "selected" %>>--select a color--</option>

      <% Campervan::CAMPERVAN_COLORS.each do |color| %>
        <option
          value="<%= color %>" <%= campervan.color == color ? "selected" : ""%>>
          <%= color.upcase %>
        </option>
      <% end %>
    </select>
    <br />

  <label for="mileage">Mileage</label>
    <input id="mileage" type="text" name="campervan[mileage]" value="<%= campervan.mileage %>" />
    <br />

  <label for="description">
    Description
    <textarea name="campervan[description]"><%=campervan.description%></textarea>
  </label>
    <br />
    <!-- value attribute is what appears on the button -->
    <input type="submit" value="<%= action == :edit ? "Update" : "Create" %> Campervan!" />

    <!--
    alternative solution:
    <% submit_text = campervan.persisted? ? "Update" : "Create" + "Campervan!" %>
    <input type="submit" value="<%= submit_text %>">
     -->
</form>
